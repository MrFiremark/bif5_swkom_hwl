package at.fhtw.swen3.configuration;

import at.fhtw.swen3.gps.service.GeoEncodingService;
import at.fhtw.swen3.gps.service.impl.OpenStreetMapsProxy;
import at.fhtw.swen3.persistence.repositories.*;
import at.fhtw.swen3.services.*;
import at.fhtw.swen3.services.impl.*;
import at.fhtw.swen3.services.mapper.ParcelMapper;
import at.fhtw.swen3.services.validation.ValidatorUtil;
import org.springframework.boot.SpringBootConfiguration;
import org.springframework.context.annotation.Bean;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import org.springframework.context.annotation.Primary;

@SpringBootConfiguration
public class SpringDocConfiguration {

    @Bean
    OpenAPI apiInfo() {
        return new OpenAPI()
                .info(
                        new Info()
                                .title("Parcel Logistics Service")
                                .description("No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)")
                                .contact(
                                        new Contact()
                                                .name("SKS")
                                                .url("http://www.technikum-wien.at/")
                                )
                                .version("1.22.1")
                )
        ;
    }

    @Primary
    @Bean
    public GeoEncodingService getOpenStreetMapsProxy(){
        return new OpenStreetMapsProxy();
    }

    @Primary
    @Bean
    public HopArrivalService getHopArrivalService(HopArrivalRepository hopArrivalRepository, ValidatorUtil validatorUtil){
        return new HopArrivalServiceImpl(hopArrivalRepository, validatorUtil);
    }

    @Primary
    @Bean
    public HopService getHopService(HopRepository hopRepository){
        return new HopServiceImpl(hopRepository);
    }

    @Primary
    @Bean
    public ParcelService getParcelService(ParcelRepository parcelRepository, ValidatorUtil validatorUtil, GeoEncodingService geoEncodingService){
        return new ParcelServiceImpl(parcelRepository, validatorUtil, geoEncodingService);
    }

    @Primary
    @Bean
    public RecipientService getRecipientService(RecipientRepository recipientRepository, ValidatorUtil validatorUtil){
        return new RecipientServiceImpl(recipientRepository, validatorUtil);
    }

    @Primary
    @Bean
    public TransferwarehouseService getTransferwarehouseService(TransferwarehouseRepository transferwarehouseRepository){
        return new TransferwarehouseServiceImpl(transferwarehouseRepository);
    }

    @Primary
    @Bean
    public TruckService getTruckService(TruckRepository truckRepository){
        return new TruckServiceImpl(truckRepository);
    }

    @Primary
    @Bean
    public WarehouseNextHopsService getWarehouseNextHopsService(WarehouseNextHopsRepository warehouseNextHopsRepository){
        return new WarehouseNextHopsServiceImpl(warehouseNextHopsRepository);
    }

    @Primary
    @Bean
    public WarehouseService getWarehouseService(WarehouseRepository warehouseRepository){
        return new WarehouseServiceImpl(warehouseRepository);
    }

}